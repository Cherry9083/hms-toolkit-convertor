package org.xms.g.vision;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.xms.g.utils.Utils;

public class MLUtils {
    private static Map<String, String> map = new HashMap<>();

    public static Object getXmsObjectWithHmsObject(Object object) {
        if (object == null) {
            return object;
        }

        String inClassName = object.getClass().getName().replaceAll("\\$", ".");

        if (!map.containsKey(inClassName)) {
            return Utils.getXmsObjectWithHmsObject(object);
        } else {
            if (object instanceof List) {
                try {
                    return transformList2X(object, true);
                } catch (IllegalAccessException | InstantiationException | ClassNotFoundException e) {
                    e.printStackTrace();
                }
            }
            if (!Utils.isHmsType(object)) {
                return object;
            }
            org.xms.g.utils.XmsLog.i("1", "inObject : " + object.getClass().getName());
            return getXmsObject(object);
        }
    }

    public static Object invokeBridgeMethod(Object receiver, String methodName,
                                               Object[] params, Class[] paramTypes, boolean isH)
            throws IllegalStateException {
        if (!isH) {
            return Utils.invokeBridgeMethod(receiver, methodName, params, paramTypes, false);
        }
        if (params == null) {
            org.xms.g.utils.XmsLog.w("1", "params == null");
            throw new IllegalArgumentException("null params");
        }

        if (paramTypes == null) {
            org.xms.g.utils.XmsLog.w("2", "paramTypes == null");
            throw new IllegalArgumentException("null paramTypes");
        }

        if (params.length != paramTypes.length) {
            org.xms.g.utils.XmsLog.w("3", "params.length != paramTypes.length");
            throw new IllegalArgumentException("mismatched params and paramTypes");
        }

        Method bridgeMethod = org.xms.g.utils.BridgeMethodUtils.getBridgeMethod(receiver.getClass(), methodName, paramTypes);
        org.xms.g.utils.XmsLog.d("4", "get bridge method " + bridgeMethod.toString());
        Method bridgedMethod = org.xms.g.utils.BridgeMethodUtils.getBridgedMethod(bridgeMethod);
        org.xms.g.utils.XmsLog.d("4", "get bridged method " + bridgedMethod.toString());
        try {
            String bridgeMethodType = bridgeMethod == null ? null : bridgeMethod.getName();
            String bridgedMethodMethodType = bridgedMethod == null ? null : bridgedMethod.getName();
            org.xms.g.utils.XmsLog.d("4", "bridgeMethod : " + bridgeMethodType + ", bridgedMethod : " + bridgedMethodMethodType);
            Class<?>[] types = bridgedMethod.getParameterTypes();
            Object[] args = new Object[params.length];
            for (int i = 0; i < params.length; i++) {
                String inClassName = params[i].getClass().getName().replaceAll("\\$", ".");
                if (!map.containsKey(inClassName)) {
                    args[i] = Utils.getOrCreateInstance(types[i], params[i], true);
                } else {
                    args[i] = getOrCreateInstance(types[i], params[i]);
                }
            }
            org.xms.g.utils.XmsLog.i("5", "receiver : " + receiver.getClass().getName() + ", args : " + args);
            return bridgedMethod.invoke(receiver, args);
        } catch (Exception ex) {
            org.xms.g.utils.XmsLog.e("5", ex.getMessage(), ex);
            throw new IllegalStateException(ex);
        }
    }

    private static Object getXmsObject(Object object) {
        String xmsClassName = null;
        String interfaceClass = null;
        String inClassName = object.getClass().getName();
        inClassName = inClassName.replaceAll("\\$", ".");
        if (map.containsKey(inClassName)) {
            xmsClassName = map.get(inClassName);
            org.xms.g.utils.XmsLog.i("1", "inClassName : " + inClassName + ", xmsClassName : " + xmsClassName);
        } else {
            Class inSuperClass = object.getClass().getSuperclass();
            Class[] interfaces = object.getClass().getInterfaces();
            String inSuperClassStr = inSuperClass.getName();
            inSuperClassStr = inSuperClassStr.replaceAll("\\$", ".");
            while (!map.containsKey(inSuperClassStr)) {
                if (inSuperClassStr.equals("java.lang.Object")) {
                    if (interfaces != null && interfaces.length > 0) {
                        String interfacesStr = interfaces[0].getName();
                        interfacesStr = interfacesStr.replaceAll("\\$", ".");
                        while (!map.containsKey(interfacesStr)) {
                            interfaces = interfaces[0].getInterfaces();
                        }
                        interfaceClass = map.get(interfacesStr);
                        org.xms.g.utils.XmsLog.d("2", "interfacesStr : " + interfacesStr + ", interfaceClass : " + interfaceClass);
                        if (interfaceClass != null) {
                            xmsClassName = interfaceClass;
                            break;
                        }
                    }
                } else {
                    inSuperClass = inSuperClass.getSuperclass();
                    interfaces = inSuperClass.getInterfaces();
                    org.xms.g.utils.XmsLog.d("3", "inSuperClass : " + inSuperClass + ", interfaces : " + interfaces);
                }
            }
            if (interfaceClass != null) {
                xmsClassName = interfaceClass;
                org.xms.g.utils.XmsLog.i("4", "xmsClassName : " + xmsClassName);
            } else {
                xmsClassName = map.get(inSuperClassStr);
                org.xms.g.utils.XmsLog.i("5", "xmsClassName : " + xmsClassName);
            }
        }

        try {
            Class clazz = Class.forName(xmsClassName);
            org.xms.g.utils.XmsLog.i("6", "clazz : " + clazz.getName());
            Constructor[] constructors = clazz.getConstructors();
            for (Constructor constructor: constructors) {
                if (constructor.getParameterTypes().length == 2
                        && Utils.isGmsClass(constructor.getParameterTypes()[0].getName())) {
                    return constructor.newInstance(null, object);
                }
            }
        } catch (ClassNotFoundException e) {
            org.xms.g.utils.XmsLog.e("7", e.getMessage(), e);
        } catch (IllegalAccessException e) {
            org.xms.g.utils.XmsLog.e("8", e.getMessage(), e);
        } catch (InstantiationException e) {
            org.xms.g.utils.XmsLog.e("9", e.getMessage(), e);
        } catch (InvocationTargetException e) {
            org.xms.g.utils.XmsLog.e("10", e.getMessage(), e);
        }
        return null;
    }

    private static Object transformList2X(Object object, boolean isH) throws IllegalAccessException, InstantiationException, ClassNotFoundException {
        if (!(object instanceof List)) {
            org.xms.g.utils.XmsLog.i("1", "object is not List");
            return object;
        }
        List result = (List) object.getClass().newInstance();
        for (int i = 0; i < ((List) object).size(); i++) {
            Object o = ((List) object).get(i);
            if (o == null || !map.containsKey(o.getClass().getCanonicalName())) {
                result.add(o);
                continue;
            }
            // should transform to X.
            String xName = map.get(o.getClass().getCanonicalName());
            Class clazz = Class.forName(xName);
            result.add(getOrCreateInstance(clazz, o));
        }
        String objectType = object == null ? null : object.getClass().getName();
        String resultType = result == null ? null : result.getClass().getName();
        org.xms.g.utils.XmsLog.i("2", "object : " + objectType +
                " isH : " + isH +
                " result : " + resultType);
        return result;
    }

    public static Object getOrCreateInstance(Class clazz, Object hInst) {
        // transform ghList to xList.
        Object instance = hInst;
        if (instance == null) {
            org.xms.g.utils.XmsLog.i("1", "instance : " + instance);
            return null;
        }
        if (instance instanceof List) {
            org.xms.g.utils.XmsLog.i("2", "instance is List");
            return mapList2X((List) instance);
        }

        if (!Utils.isXmsType(clazz)) {
            org.xms.g.utils.XmsLog.i("3", "instance : " + instance.getClass().getName());
            // HInstance
            return getXmsObjectWithHmsObject(instance);
        }

        String className = "";
        if (clazz.isInterface() || Modifier.isAbstract(clazz.getModifiers())) {
            className = clazz.getName();
            className += "$XImpl";
            try {
                org.xms.g.utils.XmsLog.d("4", "className : " + className);
                clazz = Class.forName(className);
            } catch (ClassNotFoundException e) {
                org.xms.g.utils.XmsLog.e("5", e.getMessage(), e);
            }
        }

        Constructor constructor = Utils.getWrapperConstructor(clazz);
        if (constructor != null) {
            try {
                return constructor.newInstance(null, hInst);
            } catch (InstantiationException e) {
                org.xms.g.utils.XmsLog.e("6", e.getMessage(), e);
            } catch (IllegalAccessException e) {
                org.xms.g.utils.XmsLog.e("7", e.getMessage(), e);
            } catch (InvocationTargetException e) {
                org.xms.g.utils.XmsLog.e("8", e.getMessage(), e);
            }
        }

        return null;
    }

    public static <T, R> List<T> mapList2X(List<R> list) {
        List<T> result = Utils.mapList(list, it -> (T) getXmsObjectWithHmsObject(it));
        String listType = list == null ? null : list.getClass().getName();
        String resultType = result == null ? null : result.getClass().getName();
        org.xms.g.utils.XmsLog.i("1", "list : " + listType +
                " result : " + resultType);
        return result;
    }

    static {
        map.put("com.huawei.hms.ml.scan.HmsScan", "org.xms.g.vision.barcode.Barcode");
        map.put("com.huawei.hms.ml.scan.HmsScan.AddressInfo", "org.xms.g.vision.barcode.Barcode$Address");
        map.put("com.huawei.hms.ml.scan.HmsScan.ContactDetail", "org.xms.g.vision.barcode.Barcode$ContactInfo");
        map.put("com.huawei.hms.ml.scan.HmsScan.DriverInfo", "org.xms.g.vision.barcode.Barcode$DriverLicense");
        map.put("com.huawei.hms.ml.scan.HmsScan.EmailContent", "org.xms.g.vision.barcode.Barcode$Email");
        map.put("com.huawei.hms.ml.scan.HmsScan.EventInfo", "org.xms.g.vision.barcode.Barcode$CalendarEvent");
        map.put("com.huawei.hms.ml.scan.HmsScan.EventTime", "org.xms.g.vision.barcode.Barcode$CalendarDateTime");
        map.put("com.huawei.hms.ml.scan.HmsScan.LinkUrl", "org.xms.g.vision.barcode.Barcode$UrlBookmark");
        map.put("com.huawei.hms.ml.scan.HmsScan.LocationCoordinate", "org.xms.g.vision.barcode.Barcode$GeoPoint");
        map.put("com.huawei.hms.ml.scan.HmsScan.PeopleName", "org.xms.g.vision.barcode.Barcode$PersonName");
        map.put("com.huawei.hms.ml.scan.HmsScan.SmsContent", "org.xms.g.vision.barcode.Barcode$Sms");
        map.put("com.huawei.hms.ml.scan.HmsScan.TelPhoneNumber", "org.xms.g.vision.barcode.Barcode$Phone");
        map.put("com.huawei.hms.ml.scan.HmsScan.WiFiConnectionInfo", "org.xms.g.vision.barcode.Barcode$WiFi");
        map.put("com.huawei.hms.ml.scan.HmsScanAnalyzer", "org.xms.g.vision.barcode.BarcodeDetector");
        map.put("com.huawei.hms.mlsdk.common.MLFrame", "org.xms.g.vision.Frame");
        map.put("com.huawei.hms.mlsdk.common.MLFrame.Property", "org.xms.g.vision.Frame$Metadata");
        map.put("com.huawei.hms.mlsdk.face.MLFace", "org.xms.g.vision.face.Face");
        map.put("com.huawei.hms.mlsdk.face.MLFaceKeyPoint", "org.xms.g.vision.face.Landmark");
        map.put("com.huawei.hms.mlsdk.face.MLFaceShape", "org.xms.g.vision.face.Contour");
        map.put("com.huawei.hms.mlsdk.text.MLText.Block", "org.xms.g.vision.text.TextBlock");
        map.put("com.huawei.hms.mlsdk.text.MLText.TextLine", "org.xms.g.vision.text.Line");
        map.put("com.huawei.hms.mlsdk.text.MLText.Word", "org.xms.g.vision.text.Element");
        map.put("com.huawei.hms.mlsdk.text.MLTextAnalyzer", "org.xms.g.vision.text.TextRecognizer");
    }

}
